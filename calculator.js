/* parser generated by jison 0.4.2 */
var calculator = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"P":3,"S":4,"e":5,";":6,"ID":7,"=":8,"IF":9,"THEN":10,"ELSE":11,">=":12,"<=":13,"<":14,">":15,"==":16,"+":17,"-":18,"*":19,"/":20,"^":21,"(":22,")":23,"NUMBER":24,"E":25,"PI":26,"$accept":0,"$end":1},
terminals_: {2:"error",6:";",7:"ID",8:"=",9:"IF",10:"THEN",11:"ELSE",12:">=",13:"<=",14:"<",15:">",16:"==",17:"+",18:"-",19:"*",20:"/",21:"^",22:"(",23:")",24:"NUMBER",25:"E",26:"PI"},
productions_: [0,[3,1],[4,0],[4,1],[4,3],[5,3],[5,4],[5,6],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,2],[5,3],[5,1],[5,1],[5,1],[5,1],[5,3],[5,3]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:
             return [ "<ul>\n<li> Postfijo<p> "+ this.$ + "\n </ul>"];
          
break;
case 2: this.$ = ''; 
break;
case 4: this.$ += $$[$0];
break;
case 5:this.$ = "<dd>" + $$[$0] + "</dd><dd>" + "&" + $$[$0-2] + "</dd><dd> = </dd>";
break;
case 6:this.$ = "" + $$[$0-2] + "<dd> jmpz else </dd>" + $$[$0] + "<dt> :endif </dt>"
break;
case 7:this.$ = "" + $$[$0-4] + "<dd> jmpz else </dd>" + $$[$0-2] + "<dd> jmp endif </dd><dt> :else </dt>" + $$[$0] + "<dt> :endif </dt>"
break;
case 8:this.$ = "<dd>" + $$[$0-2] + "</dd><dd>" + $$[$0] + "</dd><dd> >= </dd>";
break;
case 9:this.$ = "<dd>" + $$[$0-2] + "</dd><dd>" + $$[$0] + "</dd><dd> <= </dd>";
break;
case 10:this.$ = "<dd>" + $$[$0-2] + "</dd><dd>" + $$[$0] + "</dd><dd> < </dd>";
break;
case 11:this.$ = "<dd>" + $$[$0-2] + "</dd><dd>" + $$[$0] + "</dd><dd> > </dd>";
break;
case 12:this.$ = "<dd>" + $$[$0-2] + "</dd><dd>" + $$[$0] + "</dd><dd> == </dd>";
break;
case 13:this.$ = "<dd>" + $$[$0-2] + "</dd><dd>" + $$[$0] + "</dd><dd> + </dd>";
break;
case 14:this.$ = "<dd>" + $$[$0-2] + "</dd><dd>" + $$[$0] + "</dd><dd> - </dd>";
break;
case 15:this.$ = "<dd>" + $$[$0-2] + "</dd><dd>" + $$[$0] + "</dd><dd> * </dd>";
break;
case 16:this.$ = "<dd>" + $$[$0-2] + "</dd><dd>" + $$[$0] + "</dd><dd> / </dd>";
break;
case 17:this.$ = "<dd>" + $$[$0-2] + "</dd><dd>" + $$[$0] + "</dd><dd> ^ </dd>";
break;
case 18:this.$ = -$$[$0];
break;
case 19:this.$ = $$[$0-1];
break;
case 20:this.$ = Number(yytext);
break;
case 21:this.$ = Math.E;
break;
case 22:this.$ = Math.PI;
break;
case 23:this.$ = "&" + $$[$0]
break;
case 24:throw new Error("No puedes asignar valor a una constante");
break;
case 25:throw new Error("No puedes asignar valor a una constante");
break;
}
},
table: [{1:[2,2],3:1,4:2,5:3,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{1:[3]},{1:[2,1]},{1:[2,3],6:[1,11],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],17:[1,17],18:[1,18],19:[1,19],20:[1,20],21:[1,21]},{1:[2,23],6:[2,23],8:[1,22],10:[2,23],11:[2,23],12:[2,23],13:[2,23],14:[2,23],15:[2,23],16:[2,23],17:[2,23],18:[2,23],19:[2,23],20:[2,23],21:[2,23],23:[2,23]},{5:23,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{5:24,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{5:25,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{1:[2,20],6:[2,20],10:[2,20],11:[2,20],12:[2,20],13:[2,20],14:[2,20],15:[2,20],16:[2,20],17:[2,20],18:[2,20],19:[2,20],20:[2,20],21:[2,20],23:[2,20]},{1:[2,21],6:[2,21],8:[1,26],10:[2,21],11:[2,21],12:[2,21],13:[2,21],14:[2,21],15:[2,21],16:[2,21],17:[2,21],18:[2,21],19:[2,21],20:[2,21],21:[2,21],23:[2,21]},{1:[2,22],6:[2,22],8:[1,27],10:[2,22],11:[2,22],12:[2,22],13:[2,22],14:[2,22],15:[2,22],16:[2,22],17:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],23:[2,22]},{1:[2,2],4:28,5:3,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{5:29,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{5:30,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{5:31,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{5:32,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{5:33,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{5:34,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{5:35,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{5:36,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{5:37,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{5:38,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{5:39,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{10:[1,40],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],17:[1,17],18:[1,18],19:[1,19],20:[1,20],21:[1,21]},{1:[2,18],6:[2,18],10:[2,18],11:[2,18],12:[2,18],13:[2,18],14:[2,18],15:[2,18],16:[2,18],17:[2,18],18:[2,18],19:[2,18],20:[2,18],21:[2,18],23:[2,18]},{12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],17:[1,17],18:[1,18],19:[1,19],20:[1,20],21:[1,21],23:[1,41]},{5:42,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{5:43,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{1:[2,4]},{1:[2,8],6:[2,8],10:[2,8],11:[2,8],12:[2,8],13:[2,8],14:[2,8],15:[2,8],16:[2,8],17:[1,17],18:[1,18],19:[1,19],20:[1,20],21:[1,21],23:[2,8]},{1:[2,9],6:[2,9],10:[2,9],11:[2,9],12:[2,9],13:[2,9],14:[2,9],15:[2,9],16:[2,9],17:[1,17],18:[1,18],19:[1,19],20:[1,20],21:[1,21],23:[2,9]},{1:[2,10],6:[2,10],10:[2,10],11:[2,10],12:[2,10],13:[2,10],14:[2,10],15:[2,10],16:[2,10],17:[1,17],18:[1,18],19:[1,19],20:[1,20],21:[1,21],23:[2,10]},{1:[2,11],6:[2,11],10:[2,11],11:[2,11],12:[2,11],13:[2,11],14:[2,11],15:[2,11],16:[2,11],17:[1,17],18:[1,18],19:[1,19],20:[1,20],21:[1,21],23:[2,11]},{1:[2,12],6:[2,12],10:[2,12],11:[2,12],12:[2,12],13:[2,12],14:[2,12],15:[2,12],16:[2,12],17:[1,17],18:[1,18],19:[1,19],20:[1,20],21:[1,21],23:[2,12]},{1:[2,13],6:[2,13],10:[2,13],11:[2,13],12:[2,13],13:[2,13],14:[2,13],15:[2,13],16:[2,13],17:[2,13],18:[2,13],19:[1,19],20:[1,20],21:[1,21],23:[2,13]},{1:[2,14],6:[2,14],10:[2,14],11:[2,14],12:[2,14],13:[2,14],14:[2,14],15:[2,14],16:[2,14],17:[2,14],18:[2,14],19:[1,19],20:[1,20],21:[1,21],23:[2,14]},{1:[2,15],6:[2,15],10:[2,15],11:[2,15],12:[2,15],13:[2,15],14:[2,15],15:[2,15],16:[2,15],17:[2,15],18:[2,15],19:[2,15],20:[2,15],21:[1,21],23:[2,15]},{1:[2,16],6:[2,16],10:[2,16],11:[2,16],12:[2,16],13:[2,16],14:[2,16],15:[2,16],16:[2,16],17:[2,16],18:[2,16],19:[2,16],20:[2,16],21:[1,21],23:[2,16]},{1:[2,17],6:[2,17],10:[2,17],11:[2,17],12:[2,17],13:[2,17],14:[2,17],15:[2,17],16:[2,17],17:[2,17],18:[2,17],19:[2,17],20:[2,17],21:[1,21],23:[2,17]},{1:[2,5],6:[2,5],10:[2,5],11:[2,5],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],17:[1,17],18:[1,18],19:[1,19],20:[1,20],21:[1,21],23:[2,5]},{5:44,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{1:[2,19],6:[2,19],10:[2,19],11:[2,19],12:[2,19],13:[2,19],14:[2,19],15:[2,19],16:[2,19],17:[2,19],18:[2,19],19:[2,19],20:[2,19],21:[2,19],23:[2,19]},{1:[2,25],6:[2,25],10:[2,25],11:[2,25],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],17:[1,17],18:[1,18],19:[1,19],20:[1,20],21:[1,21],23:[2,25]},{1:[2,24],6:[2,24],10:[2,24],11:[2,24],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],17:[1,17],18:[1,18],19:[1,19],20:[1,20],21:[1,21],23:[2,24]},{1:[2,6],6:[2,6],10:[2,6],11:[1,45],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],17:[1,17],18:[1,18],19:[1,19],20:[1,20],21:[1,21],23:[2,6]},{5:46,7:[1,4],9:[1,5],18:[1,6],22:[1,7],24:[1,8],25:[1,9],26:[1,10]},{1:[2,7],6:[2,7],10:[2,7],11:[2,7],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],17:[1,17],18:[1,18],19:[1,19],20:[1,20],21:[1,21],23:[2,7]}],
defaultActions: {2:[2,1],28:[2,4]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};

  var symbol_table = {}
/* generated by jison-lex 0.1.0 */
var lexer = (function(){
var lexer = {
EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 24
break;
case 2:return 9
break;
case 3:return 10
break;
case 4:return 11
break;
case 5:return 13
break;
case 6:return 12
break;
case 7:return 14
break;
case 8:return 15
break;
case 9:return 16
break;
case 10:return 8 
break;
case 11:return 19
break;
case 12:return 20
break;
case 13:return 18
break;
case 14:return 17
break;
case 15:return 21
break;
case 16:return 22
break;
case 17:return 23
break;
case 18:return 26
break;
case 19:return 25
break;
case 20:return 6 
break;
case 21:return 7
break;
case 22:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:=)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:;)/,/^(?:[a-zA-Z][a-zA-Z0-9]*)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calculator;
exports.Parser = calculator.Parser;
exports.parse = function () { return calculator.parse.apply(calculator, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}